name: Build and publish maven container image
on:
  workflow_call:
    inputs:
      javaDistribution:
        description: The distribution of Java to use
        default: "zulu"
        type: string
      javaVersion:
        description: The version of Java to use
        default: "8"
        type: string
      sourceImage:
        description: The base docker image to use
        default: "gcr.io/distroless/java:8"
        type: string
      ecrRepository:
        description: The ECR image repository to push to
        required: false
        default: ""
        type: string
      gcrRepository:
        description: The GCR image repository to push to
        required: false
        default: ""
        type: string
      aws_region:
        description: The region for the ECR repo
        required: false
        default: us-east-1
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: AWS key with push access to ECR
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: AWS secret with push access to ECR
        required: false
      GCLOUD_SERVICE_ACCOUNT:
        description: Service account email with push access to GCR
        required: false
      GCLOUD_SERVICE_KEY:
        description: Service account JSON with push access to GCR
        required: false
      SLACK_NOTIFICATIONS_BOT_TOKEN:
        description: Bot token for Slack notifications
        required: true

jobs:
  jib-build-and-push-to-gcr:
    runs-on: ubuntu-latest
    steps:
      - name: Notify slack started
        if: success()
        id: slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-actions
          status: STARTED
          color: warning
      - uses: actions/checkout@v2
      - name: Get the ref name
        id: get_ref_name
        run: |
          if [ ! -z "$GITHUB_REF_NAME" ]
          then
              GITHUB_REF_TMP=${GITHUB_REF_NAME}
          else
              GITHUB_REF_TMP=${GITHUB_REF#refs/heads/}
              GITHUB_REF_TMP=${GITHUB_REF_TMP#refs/tags/}
          fi

          GITHUB_REF_CLEANED=${GITHUB_REF_TMP//\//-}
          echo ::set-output name=GIT_REF_NAME::${GITHUB_REF_TMP}
          echo ::set-output name=GIT_REF_DOCKER_TAG::${GITHUB_REF_CLEANED}
      - name: set up java jdk
        uses: actions/setup-java@v2
        with:
          distribution: "${{ inputs.javaDistribution }}"
          java-version: "${{ inputs.javaVersion }}"
      # Google
      - uses: google-github-actions/auth@v0
        with:
          service_account: "${{ secrets.GCLOUD_SERVICE_ACCOUNT }}"
          credentials_json: "${{ secrets.GCLOUD_SERVICE_KEY }}"
      - uses: google-github-actions/setup-gcloud@v0
      - name: authenticate to GCR
        if: "${{ inputs.gcrRepository != '' }}"
        run: gcloud auth configure-docker
      # Amazon
      - name: Configure AWS credentials
        if: "${{ inputs.ecrRepository != '' }}"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
      - name: Login to Amazon ECR
        if: "${{ inputs.ecrRepository != '' }}"
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and publish with Maven to ECR
        if: "${{ inputs.ecrRepository != '' }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.aws_region }}
        run: |
          mvn --batch-mode clean compile jib:build $MAVEN_CLI_OPTS \
          -Djib.from.image="${{ inputs.sourceImage }}" \
          -Djib.to.image="${{ inputs.ecrRepository }}:${{ steps.get_ref_name.outputs.GIT_REF_DOCKER_TAG }}"
      - name: Build and publish with Maven to GCR
        if: "${{ inputs.gcrRepository != '' }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ inputs.aws_region }}
        run: |
          mvn --batch-mode clean compile jib:build $MAVEN_CLI_OPTS \
          -Djib.from.image="${{ inputs.sourceImage }}" \
          -Djib.to.image="${{ inputs.gcrRepository }}:${{ steps.get_ref_name.outputs.GIT_REF_DOCKER_TAG }}"
      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: github-actions
          status: SUCCESS
          color: good
      - name: Notify slack failure
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: github-actions
          status: FAILED
          color: danger
